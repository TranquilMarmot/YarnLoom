{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Yarn Spinner",
  "patterns": [
    {
      "include": "#nodes"
    }
  ],
  "repository": {
    "nodes": {
      "patterns": [
        {
          "comment": "Header field name",
          "match": "^\\w+\\:",
          "name": "keyword.other"
        },
        {
          "comment": "All text in the line, not including name and optional line identifier",
          "match": "(?<=:\\s).*?(?=\\s*#line:.*|$)",
          "name": "keyword.control"
        },
        {
          "include": "#nodebody"
        }
      ]
    },
    "nodebody": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#lines"
        },
        {
          "include": "#commands"
        },
        {
          "include": "#options"
        }
      ]
    },
    "inline_expressions": {
      "begin": "{",
      "end": "}",
      "name": "keyword.other",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#numbers"
        }
      ]
    },

    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.yarnspinner",
          "begin": "//",
          "end": "$"
        },
        {
          "comment": "Line identifier",
          "name": "comment.line.number-sign",
          "match": "#line:.*"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "name": "keyword.other",
          "begin": "\\<\\<",
          "end": "\\>\\>",
          "patterns": [
            {
              "comment": "First word in a command",
              "match": "(?<=\\<\\<)\\w+",
              "name": "keyword.control"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#variables"
            },
            {
              "include": "#numbers"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other",
          "match": "\\$\\w+"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.yarnspinner",
          "match": "\\b(if|set|endif|else|elseif)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator",
          "match": "\\+|-|\\*\\/|\\!|\\<|\\>|=|==|\\<=|\\>="
        },
        {
          "name": "keyword.operator",
          "match": "\\b(is|to|not|ne|eq|le|ge|gt|lt|and|or)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.yarnspinner",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.yarnspinner",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "name": "constant.numeric",
      "match": "\\b([+-]?([0-9]*[.])?[0-9]+)\\b"
    },
    "lines": {
      "patterns": [
        {
          "comment": "Hashtags",
          "name": "constant.language",
          "match": "#[^\\s]+"
        },
        {
          "comment": "Name",
          "name": "markup.bold",
          "match": "(?<=^|-\\>)\\s*\\w+\\:"
        },
        {
          "comment": "Shortcut option",
          "name": "keyword.control",
          "match": "^\\s*-\\>"
        },
        {
          "comment": "Node begin/end",
          "name": "keyword.control",
          "match": "---|==="
        },
        {
          "include": "#commands"
        },
        {
          "include": "#inline_expressions"
        },
        {
          "include": "#format_functions"
        }
      ]
    },
    "options": {
      "patterns": [
        {
          "begin": "\\[\\[",
          "end": "\\]\\]",
          "name": "keyword.other",
          "patterns": [
            {
              "match": "\\|",
              "name": "keyword.other"
            },
            {
              "include": "#inline_expressions"
            },
            {
              "include": "#format_functions"
            },
            {
              "comment": "Displayed text in an option",
              "match": "[^{|\\]]+",
              "name": "keyword.control"
            }
          ]
        }
      ]
    },
    "format_functions": {
      "patterns": [
        {
          "begin": "\\[(?!\\[)",
          "end": "\\]",
          "name": "keyword.other.format_function",
          "patterns": [
            {
              "include": "#inline_expressions"
            },
            {
              "name": "string.quoted.double.yarnspinner.format_function",
              "begin": "\"",
              "end": "\"",
              "patterns": [
                {
                  "name": "keyword.other.format_function.placeholder",
                  "match": "%"
                },
                {
                  "name": "constant.character.escape.yarnspinner.format_function",
                  "match": "\\\\."
                }
              ]
            },
            {
              "match": "[^{=\\]]+",
              "name": "keyword.control"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.yarnspinner"
}
